【用語】用語の意味
▼ タイトル（概要、出てくる用語）
■ サブタイトル（概要、出てくる用語）


▼ 複数レコードの登録（createメソッドとinsertメソッドの違い、バルクインサート）
    User::create()でバルクインサート(複数のデータを一括でテーブルに保存すること)しようとしたがNG。
    create()メソッドは複数レコードを多次元配列で登録とかはできないらしい。
    create()メソッドで複数レコードを登録する際はforeachを使用すればできる。(PostsTableSeederでテスト済み)
    https://qiita.com/hiro_nr825/items/b41b6ce6d6c32407548c
    ■ 注意点（複数代入）
    createメソッドはデフォルトで複数代入(複数のカラムにデータを入れること)が保護されており、insertメソッドは複数代入が保護されていない。複数代入をする際にcreateメソッドはモデルにfillableかguarded属性のどちらかを設定する必要がある。insertメソッドでは設定をしなくても複数代入ができる。
    複数代入には予期しないHTTPパラメーターが送られた時にデータベースのカラムを予期しないように変更してしまう脆弱性がある。たとえば、悪意のあるユーザーがHTTPパラメーターでis_adminパラメーターを送り、それがモデルのcreateメソッドに対して渡されると、そのユーザーは自分自身を管理者(administrator)に昇格するといったもの。
    https://readouble.com/laravel/6.x/ja/eloquent.html#mass-assignment
    seedでinsertメソッドを使用することは問題ないが、登録の際にユーザーが入力できるような機能の場合はcreateメソッドを使用するべき。
    ■ 返り値の違い
    createメソッドとinsertメソッドを使用する場合は返り値にも違いがある。
    登録したレコードをそのまま使う場合はcreateメソッド使わないとダメそう。
    $post = Post::create($post);　返り値：保存したレコードのモデルインスタンス
    $post = Post::insert($post);　返り値：Boolean型の1(true)
    ■ インサートしたデータの取得（lastInsertIdメソッド）
    DB::getPdo()->lastInsertId();
    最後にインサートしたデータのIDを取得できる。バルクインサートをした場合は複数インサートしたデータの最初のデータのIDが取得される。
    例えば、３つのデータを一括保存してそれぞれ1,2,3というIDが割り振られたとしたら、DB::getPdo()->lastInsertId();は1を返すらしい。

▼ Facades(ファサード)
    DBの場合はuse宣言(use Illuminate\Support\Facades\DB;)不要だったのでなんでかGPTに聞いたらファサードだからって帰ってきたので勉強。
    ■ そもそもファサードとは（静的メソッド、サービスコンテナ）
    クラスをインスタンス化しなくても、静的(static)メソッドのように使える機能のこと。
    サービスコンテナという機能？を使っているので、依存解決(クラスの中で他のクラスを使う場合にその処理を実行するのに必要なクラスのメソッドを使えるように)してくれる。また、インスタンス化の方法をカスタマイズできるのもサービスコンテナの利点。
    https://qiita.com/minato-naka/items/afa4b930a2afac23261b
    ■ 静的メソッドって（動的メソッド）
    これはLaravelというよりPHPの話。
    クラスに定義したメソッドで、インスタンスによらず常に同じ処理を実行する関数のこと。スタティックメソッドやクラスメソッドとも呼び、普通「[アクセス権限] static function メソッド名(){}」と定義する。
    反対に動的メソッドはインスタンスに対して呼び出し、インスタンス毎に固有の結果を返すらしい。インスタンスメソッドやダイナミックメソッドとも呼ぶ。定義は「[アクセス権限] function メソッド名(){}」で静的メソッドと違ってアクセス権限を書かなくてもOK(書いてないとpublic扱いになる)。
    静的メソッドの呼び出しは、「クラス名::メソッド名() 」として呼び出す。動的メソッドをこれで呼び出すとエラーになる
    TestClass::test_method();
    動的メソッドはインスタンス化してから呼び出す。ちなみに静的メソッドはこっちでも大丈夫だし、動き自体は変わらない。
    $obj = new TestClass;
    $obj->test_method();
    https://prograshi.com/framework/laravel/laravel-facade/
    ■静的/動的プロパティ
    プロパティ(クラスの中で定義できる特別な変数)にも、静的(スタティック)プロパティと、動的(インスタンス/クラス)プロパティがある。
    定義の方法は静的プロパティが「[アクセス権限] static $変数名;」、動的プロパティが「[アクセス権限] $変数名;」。
    クラス内で呼び出す時は、静的プロパティは「self::$変数名」を、動的プロパティは「$this->変数名」を使う。
    https://prograshi.com/language/php/php-static-vs-instance/


